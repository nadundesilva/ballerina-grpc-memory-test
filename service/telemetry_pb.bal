import ballerina/grpc;
import ballerina/protobuf.types.empty;

public isolated client class TelemetryClient {
    *grpc:AbstractClientEndpoint;

    private final grpc:Client grpcClient;

    public isolated function init(string url, *grpc:ClientConfiguration config) returns grpc:Error? {
        self.grpcClient = check new (url, config);
        check self.grpcClient.initStub(self, ROOT_DESCRIPTOR_TELEMETRY, getDescriptorMapTelemetry());
    }

    isolated remote function publishMetrics(MetricsPublishRequest|ContextMetricsPublishRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        MetricsPublishRequest message;
        if req is ContextMetricsPublishRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("v0_2_0.Telemetry/publishMetrics", message, headers);
    }

    isolated remote function publishMetricsContext(MetricsPublishRequest|ContextMetricsPublishRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        MetricsPublishRequest message;
        if req is ContextMetricsPublishRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("v0_2_0.Telemetry/publishMetrics", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }

    isolated remote function publishTraces(TracesPublishRequest|ContextTracesPublishRequest req) returns grpc:Error? {
        map<string|string[]> headers = {};
        TracesPublishRequest message;
        if req is ContextTracesPublishRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        _ = check self.grpcClient->executeSimpleRPC("v0_2_0.Telemetry/publishTraces", message, headers);
    }

    isolated remote function publishTracesContext(TracesPublishRequest|ContextTracesPublishRequest req) returns empty:ContextNil|grpc:Error {
        map<string|string[]> headers = {};
        TracesPublishRequest message;
        if req is ContextTracesPublishRequest {
            message = req.content;
            headers = req.headers;
        } else {
            message = req;
        }
        var payload = check self.grpcClient->executeSimpleRPC("v0_2_0.Telemetry/publishTraces", message, headers);
        [anydata, map<string|string[]>] [_, respHeaders] = payload;
        return {headers: respHeaders};
    }
}

public client class TelemetryNilCaller {
    private grpc:Caller caller;

    public isolated function init(grpc:Caller caller) {
        self.caller = caller;
    }

    public isolated function getId() returns int {
        return self.caller.getId();
    }

    isolated remote function sendError(grpc:Error response) returns grpc:Error? {
        return self.caller->sendError(response);
    }

    isolated remote function complete() returns grpc:Error? {
        return self.caller->complete();
    }

    public isolated function isCancelled() returns boolean {
        return self.caller.isCancelled();
    }
}

public type ContextTracesPublishRequest record {|
    TracesPublishRequest content;
    map<string|string[]> headers;
|};

public type ContextMetricsPublishRequest record {|
    MetricsPublishRequest content;
    map<string|string[]> headers;
|};

public type TraceSpan record {|
    string traceId = "";
    string spanId = "";
    string serviceName = "";
    string operationName = "";
    int timestamp = 0;
    int duration = 0;
    TraceSpanReference[] references = [];
    Checkpoint[] checkpoints = [];
    record {|string key; string value;|}[] tags = [];
|};

public type Checkpoint record {|
    int timestamp = 0;
    string moduleID = "";
    string positionID = "";
|};

public type TracesPublishRequest record {|
    TraceSpan[] spans = [];
    string observabilityId = "";
    string 'version = "";
    string nodeId = "";
    string projectSecret = "";
|};

public type TraceSpanReference record {|
    string traceId = "";
    string spanId = "";
    TraceReferenceType refType = CHILD_OF;
|};

public type Metric record {|
    int timestamp = 0;
    string name = "";
    float value = 0.0;
    record {|string key; string value;|}[] tags = [];
|};

public type MetricsPublishRequest record {|
    Metric[] metrics = [];
    string observabilityId = "";
    string 'version = "";
    string nodeId = "";
    string projectSecret = "";
|};

public enum TraceReferenceType {
    CHILD_OF,
    FOLLOWS_FROM
}

const string

public isolated function getDescriptorMapTelemetry() returns map<string> {
    return {"google/protobuf/empty.proto": "0A1B676F6F676C652F70726F746F6275662F656D7074792E70726F746F120F676F6F676C652E70726F746F62756622070A05456D70747942540A13636F6D2E676F6F676C652E70726F746F627566420A456D70747950726F746F50015A057479706573F80101A20203475042AA021E476F6F676C652E50726F746F6275662E57656C6C4B6E6F776E5479706573620670726F746F33", "telemetry.proto};
}

